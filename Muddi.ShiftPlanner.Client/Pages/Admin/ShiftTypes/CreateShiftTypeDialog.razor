@inherits UpdateDialogBase<GetShiftTypesResponse>
@inject ShiftService ShiftService;
<div class="row">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Name"/>
	</div>
	<div class="col-md-8">
		<RadzenTextBox @bind-Value="EntityToEdit.Name" Placeholder="Name"></RadzenTextBox>
	</div>
</div>
<div class="row">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Color"/>
	</div>
	<div class="col-md-8">
		<RadzenColorPicker @bind-Value="EntityToEdit.Color"
		                   ShowHSV="true"
		                   ShowColors="true"
		                   ShowButton="true">
		</RadzenColorPicker>
	</div>
</div>
<div class="row">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Starting time shift in minutes"/>
	</div>
	<div class="col-md-8">
		<RadzenNumeric Min="-180" Max="180" @bind-Value="_startingTimeShift"></RadzenNumeric>
	</div>
</div>

<div class="row">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Only assignable by admin"/>
	</div>
	<div class="col-md-8">
		<RadzenCheckBox @bind-Value="EntityToEdit.OnlyAssignableByAdmin"/>
	</div>
</div>

<div class="row">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Description"/>
	</div>
	<div class="col-md-8">
		<RadzenTextArea @bind-Value="EntityToEdit.Description"></RadzenTextArea>
	</div>
</div>


<div class="row mb-3 mt-4">
	<div class="col-md-12 text-right">
		<RadzenButton Click="UpdateAndClose" ButtonStyle="ButtonStyle.Success" Text="OK"/>
		<RadzenButton Click="CloseWithoutSave" ButtonStyle="ButtonStyle.Danger" Text="Abbrechen" Class="mr-1"/>
	</div>
</div>

@code {

	private int _startingTimeShift;

	protected override void OnParametersSet()
	{
		_startingTimeShift = Convert.ToInt32(EntityToEdit.StartingTimeShift.TotalMinutes);
		base.OnParametersSet();
	}

	protected override async Task Create()
	{
		if (string.IsNullOrWhiteSpace(EntityToEdit.Name))
			throw new ArgumentException("Bitte wähle ein Namen aus");
		if (string.IsNullOrWhiteSpace(EntityToEdit.Color))
			throw new ArgumentException("Bitte wähle eine Farbe aus und klicke bei dem Farbauswähler auf 'Ok' (das is manchmal ein wenig buggy...)");
		await ShiftApi.CreateShiftType(new()
		{
			SeasonId = ShiftService.CurrentSeason.Id,
			Name = EntityToEdit.Name,
			Color = EntityToEdit.Color,
			OnlyAssignableByAdmin = EntityToEdit.OnlyAssignableByAdmin,
			Description = EntityToEdit.Description,
			StartingTimeShift = TimeSpan.FromMinutes(_startingTimeShift)
		});
	}

	protected override Task Update()
		=> ShiftApi.UpdateShiftType(EntityToEdit);

}