@inherits UpdateDialogBase<GetContainerResponse>


<div class="row">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Framework"/>
	</div>
	<div class="col-md-8">
		<RadzenDropDown Data="_frameworks"
		                TValue="GetFrameworkResponse"
		                ValueChanged="f => EntityToEdit.Framework = f"
		                TextProperty="@nameof(GetFrameworkResponse.Name)">
		</RadzenDropDown>
	</div>
</div>
<div class="row">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Start"/>
	</div>
	<div class="col-md-8">
		<RadzenDatePicker @bind-Value="EntityToEdit.Start" Placeholder="Start" ShowTime="true"></RadzenDatePicker>
	</div>
</div>
<div class="row">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Anzahl der Schichten"/>
	</div>
	<div class="col-md-8">
		<RadzenNumeric
			TValue="int"
			Min="1"
			Max="24"
			Placeholder="Anzahl der Schichten"
			ValueChanged="OnShiftCountChanged">
		</RadzenNumeric>
	</div>
</div>
<div class="row">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Ende"/>
	</div>
	<div class="col-md-8">
		<RadzenDatePicker @bind-Value="_endDate" Placeholder="Ende" Disabled="true" ShowTime="true"></RadzenDatePicker>
	</div>
</div>
<div class="row mt-4">
	<div class="col-md-12 text-right">
		<RadzenButton Click="UpdateAndClose" ButtonStyle="ButtonStyle.Success" Text="OK"/>
		<RadzenButton Click="Abort" ButtonStyle="ButtonStyle.Danger" Text="Abbrechen" Class="mr-1"/>
	</div>
</div>

@code {

	protected override async Task OnInitializedAsync()
	{
		_frameworks = await ShiftApi.FrameworksGetAll();
		EntityToEdit.Start = new DateTime(2022, 06, 17, 10, 0, 0, DateTimeKind.Local);
	}

	[Parameter]
	public Guid LocationId { get; set; }

	protected override Task Create()
	{
		return
			ShiftApi.ContainerCreateAsync(new CreateContainerRequest
			{
				FrameworkId = EntityToEdit.Framework.Id,
				Start = EntityToEdit.Start.ToUniversalTime(),
				TotalShifts = EntityToEdit.TotalShifts,
				LocationId = LocationId
			});
	}

	protected override Task Update()
	{
		throw new NotImplementedException();
	}

	private DateTime? _endDate;
	private IEnumerable<GetFrameworkResponse> _frameworks;

	private void OnShiftCountChanged(int i)
	{
		if (i < 1)
			i = 1;
		if (i > 24)
			i = 24;
		EntityToEdit.TotalShifts = i;
		if (EntityToEdit.Framework is not null)
			_endDate = EntityToEdit.GetEndTime();
	}

}