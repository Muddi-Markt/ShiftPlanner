@page "/admin/locations"
@using Refit
@inject ShiftService ShiftService;
@inherits GetAllPageBase<GetLocationResponse, CreateLocationDialog>

<RadzenText TextStyle="TextStyle.H4">Locations</RadzenText>
<RadzenText TextStyle="TextStyle.Body1">Definiere Orte (z.B. Bar 1, Lemonaid Stand, Aufbau, ...)</RadzenText>
<RadzenText TextStyle="TextStyle.Body1">und Schicht-Container (Wie häufig sollen Frameworks an welchen Tagen in den jeweiligen Locations stattfinden)<br/>Benutze für die Container halbtransparente Farben.</RadzenText>
<RadzenButton Icon="add" Click="Create"></RadzenButton>
<RadzenButton Icon="refresh" Click="LoadGridData"></RadzenButton>
<RadzenDataGrid @ref="DataGrid" TItem="GetLocationResponse" Data="@Data" LoadData="LoadGridData" Count="Count" IsLoading="@IsLoading">
	<Columns>
		<RadzenDataGridColumn TItem="GetLocationResponse" Title="Delete" Width="100px">
			<Template>
				<RadzenButton Icon="edit" Click="@(() => Edit(context))"></RadzenButton>
				<RadzenButton Icon="delete" Style="background: #f00" Click="@(() => DeleteItem(context, context.Name))"></RadzenButton>
			</Template>
		</RadzenDataGridColumn>

		<RadzenDataGridColumn TItem="GetLocationResponse" Title="Name" Width="200px">
			<Template>@context.Name</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="GetLocationResponse" Title="Typ" Width="100px">
			<Template>@context.Type.Name</Template>
		</RadzenDataGridColumn>

		<RadzenDataGridColumn TItem="GetLocationResponse" Title="Container">
			<Template>
				<RadzenButton Icon="edit" Click="() => EditContainers(context)"></RadzenButton>
			</Template>
		</RadzenDataGridColumn>
	</Columns>
</RadzenDataGrid>


@code {

	protected override Task<IReadOnlyCollection<GetLocationResponse>> LoadData() => ShiftApi.GetAllLocations(new() { SeasonId = ShiftService.CurrentSeason.Id });
	protected override string NameOfEntity => "Standort";
	protected override Task Delete(GetLocationResponse request) => ShiftApi.DeleteLocationAsync(request.Id);

	private async Task EditContainers(GetLocationResponse l)
	{
		var locationResponse = await ShiftApi.GetLocationById(l.Id);
		var parameter = new Dictionary<string, object> { [nameof(EditContainersDialog.EntityToEdit)] = locationResponse };
		await DialogService.OpenAsync<EditContainersDialog>("Edit containers", parameter);
	}

}