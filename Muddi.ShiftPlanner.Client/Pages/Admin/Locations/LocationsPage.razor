@page "/admin/locations"
@inherits GetAllPageBase<GetLocationResponse, CreateLocationDialog>

<RadzenButton Icon="add" Click="Create"></RadzenButton>
<RadzenButton Icon="refresh" Click="LoadGridData"></RadzenButton>
<RadzenDataGrid @ref="DataGrid" TItem="GetLocationResponse" Data="@Data" LoadData="LoadGridData" Count="Count" IsLoading="@IsLoading">
	<Columns>
		<RadzenDataGridColumn TItem="GetLocationResponse" Title="Delete" Width="100px">
			<Template>
				<RadzenButton Icon="edit" Click="@(() => Edit(context))"></RadzenButton>
				<RadzenButton Icon="delete" Style="background: #f00" Click="@(() => DeleteItem(context, context.Name))"></RadzenButton>
			</Template>
		</RadzenDataGridColumn>

		<RadzenDataGridColumn TItem="GetLocationResponse" Title="Name" Width="200px">
			<Template>@context.Name</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="GetLocationResponse" Title="Typ" Width="100px">
			<Template>@context.Type.Name</Template>
		</RadzenDataGridColumn>

		<RadzenDataGridColumn TItem="GetLocationResponse" Title="Container">
			<Template>
				<RadzenDataList Data="context.Containers" AllowPaging="true" WrapItems="true" PageSize="10">
					<Template Context="c">
						<div class="d-flex justify-content-between" style="margin: 0; padding: .25rem">
							<div>@TextForContainers(c)</div>
							<RadzenButton Size="ButtonSize.Small" Icon="clear"></RadzenButton>
						</div>

					</Template>
				</RadzenDataList>
				<RadzenButton Icon="add" Click="async () => await AddContainers(context)"></RadzenButton>
			</Template>
		</RadzenDataGridColumn>
	</Columns>
</RadzenDataGrid>


@code {

	protected override Task<IReadOnlyCollection<GetLocationResponse>> LoadData() => ShiftApi.LocationsGetAll();
	protected override string NameOfEntity => "Standort";
	protected override Task Delete(GetLocationResponse request) => ShiftApi.DeleteLocationAsync(request.Id);

	private async Task AddContainers(GetLocationResponse f)
	{
		var parameter = new Dictionary<string, object> { [nameof(AddLocationContainersDialog.LocationId)] = f.Id };
		await DialogService.OpenAsync<AddLocationContainersDialog>("Füge Container hinzu", parameter);
		ReloadData();
		await InvokeAsync(StateHasChanged);
	}

	private string TextForContainers(GetContainerResponse c)
	{
		var localStart = c.Start.ToLocalTime();
		var localEnd = c.GetEndTime().ToLocalTime();
		if (localStart.Date == localEnd.Date)
			return $"{localStart:ddd, dd.MM. HH:mm} - {localEnd:HH:mm}";
		return $"{localStart:ddd, dd.MM. HH:mm} - {localEnd:ddd, dd.MM. HH:mm}";
	}

}