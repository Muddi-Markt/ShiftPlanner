@using Muddi.ShiftPlanner.Shared.Api
@inherits UpdateDialogBase<GetLocationResponse>
<div class="row mt-1 mb-1 w-100">
    <div class="col-md-4 align-items-center d-flex">
        <RadzenLabel Text="Name"/>
    </div>
    <div class="col-md-8">
        <RadzenTextBox  @bind-Value="_name" Placeholder="Name"></RadzenTextBox>
    </div>
</div>
<div class="row mt-1 mb-1 w-100">
    <div class="col-md-4 align-items-center d-flex">
        <RadzenLabel Text="Location Typ"/>
    </div>
    <div class="col-md-8 d-flex" style="gap:1rem;">
        <RadzenDropDown @bind-Value="_selectedType"
                        AllowVirtualization="true"
                        Count="_typesTotalCount"
                        Data="_locationTypes"
                        TextProperty="@nameof(GetLocationTypesResponse.Name)">
        </RadzenDropDown>
        <RadzenButton Icon="add" Click="AddLocationType"></RadzenButton>
        
    </div>
</div>
<div class="row mb-3 mt-4">
    <div class="col-md-12 text-right">
        <RadzenButton Disabled="@(_selectedType == null)" Click="UpdateAndClose" ButtonStyle="ButtonStyle.Success" Text="OK"/>
        <RadzenButton Click="CloseWithoutSave" ButtonStyle="ButtonStyle.Danger" Text="Abbrechen" Class="mr-1"/>
    </div>
</div>

@code {

    protected override async Task OnParametersSetAsync()
    {
        await RefreshLocationTypes();
    }

    private async Task RefreshLocationTypes()
    {
        _locationTypes = (await ShiftApi.GetAllLocationTypes());
        _typesTotalCount = _locationTypes.Count;
        _selectedType = _locationTypes.FirstOrDefault();
    }

    private IReadOnlyCollection<GetLocationTypesResponse> _locationTypes;
    private int _typesTotalCount;

    private GetLocationTypesResponse? _selectedType;

    

    private string? _name;

    protected override Task Create()
    {
        return ShiftApi.CreateLocation(new CreateLocationRequest()
        {
            Name = _name,
            TypeId = _selectedType.Id
        });
    }

    protected override Task Update()
    {
        throw new NotImplementedException();
    }

    private async Task AddLocationType()
    {
        await DialogService.OpenAsync<AddLocationTypeDialog>("Add location type");
        await RefreshLocationTypes();
        await InvokeAsync(StateHasChanged);
    }

}