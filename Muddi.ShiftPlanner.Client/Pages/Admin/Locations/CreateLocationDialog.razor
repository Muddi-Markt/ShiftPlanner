@using Muddi.ShiftPlanner.Shared.Api
@inherits UpdateDialogBase<GetLocationResponse>
@inject ShiftService ShiftService;
<div class="row mt-1 mb-1 w-100">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Name"/>
	</div>
	<div class="col-md-8">
		<RadzenTextBox @bind-Value="EntityToEdit.Name" Placeholder="Name"></RadzenTextBox>
	</div>
</div>
<div class="row mt-1 mb-1 w-100">
	<div class="col-md-4 align-items-center d-flex">
		<RadzenLabel Text="Location Typ"/>
	</div>
	<div class="col-md-8 d-flex" style="gap:1rem;">
		<RadzenDropDown @bind-Value="EntityToEdit.Type"
		                Data="_locationTypes"
		                TextProperty="@nameof(GetLocationTypesResponse.Name)">
		</RadzenDropDown>
		<RadzenButton Icon="add" Click="AddLocationType"></RadzenButton>

	</div>
</div>
<div class="row mb-3 mt-4">
	<div class="col-md-12 text-right">
		<RadzenButton Disabled="@(EntityToEdit.Type.Id == default)" Click="UpdateAndClose" ButtonStyle="ButtonStyle.Success" Text="OK"/>
		<RadzenButton Click="CloseWithoutSave" ButtonStyle="ButtonStyle.Danger" Text="Abbrechen" Class="mr-1"/>
	</div>
</div>

@code {

	protected override async Task OnParametersSetAsync()
	{
		await RefreshLocationTypes();
	}

	private async Task RefreshLocationTypes()
	{
		_locationTypes = (await ShiftApi.GetAllLocationTypes());
		if (EntityToEdit.Type.Id == default)
			EntityToEdit.Type = _locationTypes.First();
	}

	private IReadOnlyCollection<GetLocationTypesResponse> _locationTypes;


	protected override Task Create()
	{
		return ShiftApi.CreateLocation(new CreateLocationRequest()
		{
			SeasonId = ShiftService.CurrentSeason.Id,
			Name = EntityToEdit.Name,
			TypeId = EntityToEdit.Type.Id
		});
	}

	protected override Task Update()
	{
		return ShiftApi.UpdateLocation(EntityToEdit.Id, new UpdateLocationRequest()
		{
			Id = EntityToEdit.Id,
			Name = EntityToEdit.Name,
			TypeId = EntityToEdit.Type.Id
		});
	}

	private async Task AddLocationType()
	{
		await DialogService.OpenAsync<AddLocationTypeDialog>("Add location type");
		await RefreshLocationTypes();
		await InvokeAsync(StateHasChanged);
	}

}