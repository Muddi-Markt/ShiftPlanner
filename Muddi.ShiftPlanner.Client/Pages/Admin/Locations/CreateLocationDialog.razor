@using Muddi.ShiftPlanner.Shared.Api
@using Muddi.ShiftPlanner.Shared.Contracts.v1.Requests
@inject IMuddiShiftApi ShiftApi;
@inject Radzen.DialogService dialogService
<div class="row">
    <div class="col-md-4 align-items-center d-flex">
        <RadzenLabel Text="Name"/>
    </div>
    <div class="col-md-8">
        <RadzenTextBox  @bind-Value="_name" Placeholder="Name"></RadzenTextBox>
    </div>
</div>
<div class="row">
    <div class="col-md-4 align-items-center d-flex">
        <RadzenLabel Text="Location Typ"/>
    </div>
    <div class="col-md-8">
        <RadzenDropDown @bind-Value="_selectedType"
                        AllowVirtualization="true"
                        Count="_count"
                        Data="_data"
                        TextProperty="@nameof(GetLocationTypesResponse.Name)">
        </RadzenDropDown>

    </div>
</div>
<div class="row">
    <div class="col-md-12 text-right">
        <RadzenButton Click="@((args) => dialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="Abbrechen" Style="width: 120px" Class="mr-1" />
        <RadzenButton Click="Create" Text="OK" Style="width: 120px" />
    </div>
</div>

@code {

    protected override async Task OnParametersSetAsync()
    {
        _data = (await ShiftApi.LocationTypesGetAll());
        _count = _data.Count;
        _selectedType = _data.First();
    }

    private IReadOnlyCollection<GetLocationTypesResponse> _data;
    private int _count;

    private GetLocationTypesResponse? _selectedType;

    private async Task Create()
    {
        await ShiftApi.LocationsCreate(new CreateLocationRequest()
        {
            Name = _name,
            TypeId = _selectedType.Id
        });
        dialogService.Close(true);
    }

    private string? _name;
}