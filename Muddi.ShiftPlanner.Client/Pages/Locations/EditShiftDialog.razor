@using Microsoft.AspNetCore.Components
@using Muddi.ShiftPlanner.Shared.Contracts.v1.Responses
@using Muddi.ShiftPlanner.Client.Pages.Admin;
@using System.Security.Claims
@using Muddi.ShiftPlanner.Client.Services
@using Muddi.ShiftPlanner.Shared.Contracts.v1
@using Muddi.ShiftPlanner.Shared.Contracts.v1.Requests
@inject ShiftService ShiftService;
@inherits UpdateDialogBase<GetShiftResponse>

@if (_user is not null && EntityToEdit.Type is not null)
{
	@if (_isAdmin)
	{
		<h3>Admin Mode</h3>
	}
	<div class="row">
		<div class="col-md-4 align-items-center d-flex">
			<RadzenLabel Text="User"/>
		</div>
		<div class="col-md-8">
			<RadzenTextBox 
				ReadOnly="true"
				Value="@($"{EntityToEdit.Employee.UserName} {(_isShiftUser ? "(you)" : "")}")"></RadzenTextBox>
		</div>
	</div>

	<div class="row">
		<div class="col-md-4 align-items-center d-flex">
			<RadzenLabel Text="Start"/>
		</div>
		<div class="col-md-8">
			<RadzenTextBox Name="Start" Value="@EntityToEdit.StartToDisplayString()" ReadOnly="true"/>
		</div>
	</div>
	<div class="row">
		<div class="col-md-4 align-items-center d-flex">
			<RadzenLabel Text="Start"/>
		</div>
		<div class="col-md-8">
			<RadzenTextBox
				Name="End"
				Value="@EntityToEdit.EndToDisplayString()"
				ReadOnly="true"/>
		</div>
	</div>
	<div class="row">
		<div class="col-md-4 align-items-center d-flex">
			<RadzenLabel Text="Type"/>
		</div>
		<div class="col-md-8">
			@if (_isShiftUser || _isAdmin)
			{
				@if (_availableShiftTypes.Any())
				{
					<RadzenDropDown TValue="GetShiftTypesResponse" Data="@_availableShiftTypes" @bind-Value="@EntityToEdit.Type">
						<Template Context="type">@(((GetShiftTypesResponse)type).Name)</Template>
					</RadzenDropDown>
				}
				else
				{
					<RadzenTextBox Value="@(EntityToEdit.Type?.Name ?? "Keine freien Slots frei")" ReadOnly="true"></RadzenTextBox>
				}
			}
			else
			{
				<RadzenTextBox Name="Type" Value="@(EntityToEdit.Type?.Name ?? "Keine freien Slots frei")" ReadOnly="true"/>
			}
		</div>
	</div>
	@if ((_isShiftUser || _isAdmin) && EntityToEdit.Id != default)
	{
		<div class="row">
			<div class="col-md-4 align-items-center d-flex">
				<RadzenLabel Text="Delete"/>
			</div>
			<div class="col-md-8">
				<RadzenButton
					Click="DeleteClick"
					Text="Schicht Löschen"
					Icon="delete"
					Style="background: #de0808">
				</RadzenButton>
			</div>
		</div>
	}
}
<div class="row mb-3 mt-4">
	<div class="col-md-12 text-right">
		<RadzenButton Click="UpdateAndClose" ButtonStyle="ButtonStyle.Success" Text="OK"/>
		<RadzenButton Click="CloseWithoutSave" ButtonStyle="ButtonStyle.Danger" Text="Abbrechen" Class="mr-1"/>
	</div>
</div>


@code {

	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }


	private ClaimsPrincipal? _user;
	private bool _isAdmin;
	private bool _isShiftUser;
	private HashSet<GetShiftTypesResponse> _availableShiftTypes = new();


	protected override async Task OnInitializedAsync()
	{
		try
		{
			var auth = await AuthenticationState;

			_user = auth.User;
			var keycloakId = _user.GetKeycloakId();
			if (keycloakId != default)
			{
				_isShiftUser = keycloakId == EntityToEdit.Employee.Id;
				_isAdmin = _user.IsInRole(ApiRoles.Admin);
			}
			GetContainerResponse container = await ShiftApi.GetContainer(EntityToEdit.ContainerId);
			var dto = await ShiftApi.GetAvailableShiftTypes(EntityToEdit.ContainerId, EntityToEdit.Start);
			if (!_isAdmin)
				dto = dto.Where(x => x.OnlyAssignableByAdmin == false);
			_availableShiftTypes = new HashSet<GetShiftTypesResponse>(dto);

			if (EntityToEdit.Type is not null && _availableShiftTypes.All(st => st.Id != EntityToEdit.Type.Id))
				_availableShiftTypes.Add(EntityToEdit.Type);
			if (_availableShiftTypes.Count == 0)
				throw new Exception("Keine Schichten verfügbar");
			EntityToEdit.Type ??= _availableShiftTypes.First();
			EntityToEdit.End = EntityToEdit.Start + TimeSpan.FromSeconds(container.Framework.SecondsPerShift);
		}
		catch (Exception ex)
		{
			DialogService.Close(false);
			_ = DialogService.Error(ex);
		}
	}


	protected override async Task Create()
	{
		var res = await ShiftService.AddShiftToContainer(EntityToEdit.ContainerId, new CreateShiftRequest
		{
			EmployeeKeycloakId = EntityToEdit.Employee.Id,
			ShiftTypeId = EntityToEdit.Type.Id,
			Start = EntityToEdit.Start
		});
		EntityToEdit.Id = res;
	}

	protected override Task Update()
	{
		if (!(_isAdmin || _isShiftUser))
			return Task.CompletedTask;
		return ShiftApi.UpdateShift(EntityToEdit.Id, new CreateShiftRequest
		{
			EmployeeKeycloakId = EntityToEdit.Employee.Id,
			ShiftTypeId = EntityToEdit.Type.Id,
			Start = EntityToEdit.Start
		});
	}


	private async Task DeleteClick()
	{
		try
		{
			var ask = await DialogService.Confirm("Bist du sicher, dass du die Schicht löschen willst?");
			if (ask is true)
			{
				await ShiftApi.DeleteShift(EntityToEdit.Id);
				DialogService.Close(true); //return true, as we have changed the entity (deleted it)
			}
		}
		catch (Exception ex)
		{
			await DialogService.Error(ex);
		}
	}

}