name: Publish Docker image

on:
  push:
    tags:
      - 'release/v*'
env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [
          { path: "Muddi.ShiftPlanner.Client", name: "client" },
          { path: "Muddi.ShiftPlanner.Server.Api", name: "api" },
          { path: "Muddi.ShiftPlanner.Services.Alerting", name: "alerting" },
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Convert repository name to lowercase
        id: repo_lower
        run: echo "lower_repo=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/release/v')
        run: |
          FULL_VERSION=${GITHUB_REF#refs/tags/release/}
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
          # Regex to check for three-part semver optionally followed by a pre-release identifier
          if [[ "$FULL_VERSION" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-.+)?$ ]]; then
            MAJOR="v${BASH_REMATCH[1]}"
            MINOR="v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
            PATCH="v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
            echo "MAJOR=$MAJOR" >> $GITHUB_ENV
            echo "MINOR=$MINOR" >> $GITHUB_ENV
            echo "PATCH=$PATCH" >> $GITHUB_ENV
            if [[ -z "${BASH_REMATCH[4]}" ]]; then # Check if the pre-release part is empty
              echo "STABLE_RELEASE=true" >> $GITHUB_ENV
              echo "Version is strictly stable semver: $FULL_VERSION"
            else
              echo "STABLE_RELEASE=false" >> $GITHUB_ENV
              echo "Version is pre-release semver: $FULL_VERSION"
            fi
          else
            echo "STABLE_RELEASE=false" >> $GITHUB_ENV
            echo "Error: Version does not follow semver vX.Y.Z or vX.Y.Z-prerelease format."
            exit 1 # This will stop the workflow if the version is not semver
          fi
          echo "Full Version: $FULL_VERSION"


      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Define Tags
        run: |
          TAGS="${{ env.REGISTRY }}/${{ env.lower_repo }}/${{ matrix.app.name }}:${{ github.sha }},"
          TAGS+="${{ env.REGISTRY }}/${{ env.lower_repo }}/${{ matrix.app.name }}:${{ env.FULL_VERSION }},"
          if [[ ${{ env.STABLE_RELEASE }} == 'true' ]]; then
            TAGS+="${{ env.REGISTRY }}/${{ env.lower_repo }}/${{ matrix.app.name }}:${{ env.MINOR }},"
            TAGS+="${{ env.REGISTRY }}/${{ env.lower_repo }}/${{ matrix.app.name }}:${{ env.MAJOR }},"
          fi
          echo "TAGS=$TAGS" >> $GITHUB_ENV
          echo "Using tags: $TAGS"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ matrix.app.path }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.TAGS }}
